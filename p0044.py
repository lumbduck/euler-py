"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
"""
from itertools import count
import time

from lib.seq import pentagonal_num, which_pentagonal_num

start_time = time.time()


def pent_step_rate(i):
    """Return the difference between the i-th and (i+1)-th pentagonal number."""
    return 3 * i + 1


best_pair = None  # will be a 2-tuple (i, j)
min_diff = None

for j in count():
    if min_diff and min_diff < pent_step_rate(j):
        break
    for i in range(j - 1, 0, -1):
        a = pentagonal_num(i)
        b = pentagonal_num(j)
        diff = b - a

        if min_diff and diff >= min_diff:
            break

        if which_pentagonal_num(a + b) and which_pentagonal_num(diff):
            best_pair = (a, b)
            min_diff = diff
            print("New best: Pent({}) & Pent({}) -> ({}, {}) -> {}".format(i, j, a, b, min_diff))

print("Execution time: {}".format(time.time() - start_time))
