"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from lib.prime import prime_factors as prime_factors
from lib.seq import triangle_num

from datetime import datetime
from functools import reduce
from operator import mul

start_time = datetime.now()

divisibility_target = 500


def merge_factors(factorization_1, factorization_2):
    """Requires parameters in format returned by prime.prime_factors."""
    factors = set(factorization_1).union(factorization_2)
    return {k: factorization_1.get(k, 0) + factorization_2.get(k, 0) for k in factors}


# the first constiuent of the closed form of a triangle number: n(n+1)/2
n = 1
n_factors = dict()
next_factors = prime_factors(n + 1)

factor_count = 1

while factor_count <= divisibility_target:
    n += 1
    n_factors = next_factors
    next_factors = prime_factors(n + 1)

    merged = merge_factors(n_factors, next_factors)

    # There will always be an extra factor of 2 (see closed form), which is divided out
    merged[2] -= 1

    # The actual number of factors (prime and otherwise) is given by this product
    factor_count = reduce(mul, (v + 1 for v in merged.values()))


print("Triangle number {} is {} ({} factors)".format(n, triangle_num(n), factor_count))
print("Execution time: {}".format(datetime.now() - start_time))
